package dao;

import model.LeaveApplication;
import utils.DBConnection;

import java.sql.*;
import java.time.LocalDate; // ✅ FIX: Import LocalDate
import java.util.ArrayList;
import java.util.List;

public class LeaveApplicationDAO {

    public static void save(LeaveApplication app) throws SQLException {
        String sql = "INSERT INTO LeaveApplication (applicant_id, teacher_id, status, description, start_date, end_date, is_teacher_application) VALUES (?, ?, ?, ?, ?, ?, ?)";
        try (Connection conn = DBConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, app.getApplicantId());
            if (app.getTeacherId() == null) ps.setNull(2, Types.INTEGER);
            else ps.setInt(2, app.getTeacherId());
            ps.setString(3, app.getStatus() == null ? "Pending" : app.getStatus());
            ps.setString(4, app.getDescription());
            ps.setDate(5, app.getStartDate());
            ps.setDate(6, app.getEndDate());
            ps.setBoolean(7, app.isTeacherApplication());
            ps.executeUpdate();
        }
    }

    // Get applications for a teacher (pending)
    public static List<LeaveApplication> findForTeacher(int teacherId) throws SQLException {
        String sql = "SELECT * FROM LeaveApplication WHERE teacher_id = ? ORDER BY start_date DESC";
        List<LeaveApplication> list = new ArrayList<>();
        try (Connection conn = DBConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, teacherId);
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    LeaveApplication a = mapRow(rs);
                    list.add(a);
                }
            }
        }
        return list;
    }

    // Get applications for Vice Principal (those with is_teacher_application = false)
    public static List<LeaveApplication> findForVicePrincipal() throws SQLException {
        String sql = "SELECT * FROM LeaveApplication WHERE is_teacher_application = FALSE ORDER BY start_date DESC";
        List<LeaveApplication> list = new ArrayList<>();
        try (Connection conn = DBConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {
            while (rs.next()) {
                list.add(mapRow(rs));
            }
        }
        return list;
    }

    // In LeaveApplicationDAO.java
    public List<LeaveApplication> findByStudent(int studentId) throws Exception {
        List<LeaveApplication> applications = new ArrayList<>();
        String sql = "SELECT id, status, description, start_date, end_date, decision_date " +
                "FROM LeaveApplication WHERE applicant_id = ? ORDER BY id DESC";

        try (Connection con = DBConnection.getConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setInt(1, studentId);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                LeaveApplication app = new LeaveApplication();
                app.setId(rs.getInt("id"));
                app.setStatus(rs.getString("status")); // ✅ gets Approved/Declined
                app.setDescription(rs.getString("description"));
                app.setStartDate(rs.getDate("start_date"));
                app.setEndDate(rs.getDate("end_date"));
                app.setDecisionDate(rs.getDate("decision_date"));
                applications.add(app);
            }
        }
        return applications;
    }


    public static void updateStatus(int appId, String status, Integer decisionBy) throws SQLException {
        String sql = "UPDATE LeaveApplication SET status = ?, decision_by = ?, decision_date = ? WHERE id = ?";
        try (Connection conn = DBConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, status);
            if (decisionBy == null) ps.setNull(2, Types.INTEGER);
            else ps.setInt(2, decisionBy);
            ps.setDate(3, new Date(System.currentTimeMillis()));
            ps.setInt(4, appId);
            ps.executeUpdate();
        }
    }

    private static LeaveApplication mapRow(ResultSet rs) throws SQLException {
        LeaveApplication a = new LeaveApplication();
        a.setId(rs.getInt("id"));
        a.setApplicantId(rs.getInt("applicant_id"));
        int tId = rs.getInt("teacher_id");
        if (rs.wasNull()) a.setTeacherId(null); else a.setTeacherId(tId);
        a.setStatus(rs.getString("status"));
        a.setDescription(rs.getString("description"));
        a.setStartDate(rs.getDate("start_date"));
        a.setEndDate(rs.getDate("end_date"));
        a.setTeacherApplication(rs.getBoolean("is_teacher_application"));
        a.setDecisionBy(rs.getInt("decision_by"));
        if (rs.wasNull()) a.setDecisionBy(null);
        a.setDecisionDate(rs.getDate("decision_date"));
        return a;
    }


}

///////
public static List<LeaveApplication> getApprovedLeaves() {
        List<LeaveApplication> leaves = new ArrayList<>();
        String sql = "SELECT la.id, s.roll_no, la.start_date, la.end_date " +
                "FROM LeaveApplication la " +
                "JOIN student s ON la.applicant_id = s.id " +
                "WHERE la.status = 'Approved' " +
                "AND CURDATE() BETWEEN la.start_date AND la.end_date";

        try (Connection conn = DBConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                LeaveApplication leave = new LeaveApplication();
                leave.setId(rs.getInt("id"));
                leave.setRollNo(rs.getString("roll_no"));
                Date start = rs.getDate("start_date");
                Date end = rs.getDate("end_date");

                // Calculate number of days
                long diff = end.getTime() - start.getTime();
                int days = (int) (diff / (1000 * 60 * 60 * 24)) + 1;

                leave.setLeaveDays(days);
                leaves.add(leave);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return leaves;
    }